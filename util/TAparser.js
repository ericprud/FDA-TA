/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var TAparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"TAdecl":3,"PREP":4,"TA_Or_LIBRARY":5,"Name":6,"DeclStar":7,"EOF":8,"TA":9,"LIBRARY":10,"Decl":11,"IMPORT":12,"STRING_LITERAL2":13,"AS":14,"PNAME_NS":15,"EndpointDecl":16,"OutcomeDecl":17,"AssessmentDecl":18,"ObservationDecl":19,"CovariatesList":20,"COVARIATES":21,"Covariate_Star":22,"CovariateStar":23,"Covariate":24,"CONCOMITANT":25,"Medication_Star":26,"HISTORY":27,"EndpointType":28,"Definition":29,"Outcome":30,"SAFETY":31,"EFFICACY":32,"OUTCOME":33,"Outcome_Def":34,"Outcome_Def_Opt":35,"(":36,")":37,"Observation_Or_Assessment":38,"ASSESSMENT":39,"Assessment_Def":40,"Assessment":41,"Assessment_Def_Opt":42,"Observation_Or_Assessment_Plus":43,"Observation":44,"{":45,"}":46,"OBSERVATION":47,"Observation_Def":48,"Observation_Def_Opt":49,"NAME":50,"Iri":51,"Definition_Elt_Star":52,"Definition_Elt":53,"STRING_LITERAL_LONG2":54,"<":55,"CodeDefinition":56,">":57,"[":58,"INTEGER":59,"]":60,"@":61,"RelChar":62,"=":63,"IRIREF":64,"PrefixedName":65,"PNAME_LN":66,"$accept":0,"$end":1},
terminals_: {2:"error",8:"EOF",9:"TA",10:"LIBRARY",12:"IMPORT",13:"STRING_LITERAL2",14:"AS",15:"PNAME_NS",21:"COVARIATES",22:"Covariate_Star",25:"CONCOMITANT",26:"Medication_Star",27:"HISTORY",31:"SAFETY",32:"EFFICACY",33:"OUTCOME",36:"(",37:")",39:"ASSESSMENT",45:"{",46:"}",47:"OBSERVATION",50:"NAME",54:"STRING_LITERAL_LONG2",55:"<",57:">",58:"[",59:"INTEGER",60:"]",61:"@",63:"=",64:"IRIREF",66:"PNAME_LN"},
productions_: [0,[3,5],[4,0],[5,1],[5,1],[7,0],[7,2],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[20,2],[23,0],[23,2],[24,2],[24,2],[16,4],[28,1],[28,1],[17,3],[30,2],[35,3],[35,0],[34,2],[18,3],[41,2],[42,3],[42,0],[40,2],[43,1],[43,2],[38,1],[38,3],[19,3],[44,2],[49,3],[49,0],[48,1],[6,1],[6,1],[29,1],[52,0],[52,2],[53,1],[53,1],[53,3],[53,4],[53,2],[53,2],[56,3],[62,1],[62,1],[51,1],[51,1],[65,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		    if ('name' in yy) {
			yy.name = $$[$0-2];
                        yy.type = $$[$0-3];
                    }
		    return yy.decls;
		  
break;
case 2: yy.decls = {};
                    yy.imports = [];
		    yy.decl = function (type, name, ob, line, column) {
		      type = type.substr(0, type.length-1);
		      ob._name = name;
		      ob._ = type;
                      ob.file = yy.file;
                      ob.line = line;
                      ob.column = column;
		      yy.decls[name] = ob;
		      if ((type == 'SAFETY' || type == 'EFFICACY') && 'allEndpoints' in yy)
			yy.allEndpoints.push(name);
		      return name;
                    } ;
		  
break;
case 3: this.$ = 'TA'; 
break;
case 4: this.$ = 'LIBRARY'; 
break;
case 5: this.$ = null; 
break;
case 6: this.$ = $$[$0-1] + $$[$0]; 
break;
case 7: yy.imports.push([$$[$0], $$[$0-2]]); this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0-1]; 
break;
case 14: this.$ = null; 
break;
case 15: this.$ = $$[$0-1] + $$[$0]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0-1]; 
break;
case 18: this.$ = yy.decl($$[$0-3], $$[$0-2], { definition:$$[$0-1], outcome:$$[$0] }, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 21: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 22: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 23: this.$ = $$[$0-1]; 
break;
case 24: this.$ = null; 
break;
case 25: this.$ = { definition:$$[$0-1], assessment:$$[$0] }; 
break;
case 26: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 27: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 28: this.$ = $$[$0-1]; 
break;
case 29: this.$ = null; 
break;
case 30: this.$ = { definition:$$[$0-1], basedOn:$$[$0] }; 
break;
case 31: this.$ = [ $$[$0] ]; 
break;
case 32: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 33: this.$ = [false, $$[$0]]; 
break;
case 34: this.$ = [true, $$[$0-1]]; 
break;
case 35: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 36: this.$ = $$[$0] ? yy.decl('OBSERVATION', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 37: this.$ = $$[$0-1]; 
break;
case 38: this.$ = null; 
break;
case 39: this.$ = { definition:$$[$0] }; 
break;
case 40: this.$ = $$[$0]; 
break;
case 41: this.$ = $$[$0]; 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = {}; 
break;
case 44: $$[$0-1][$$[$0][0]] = $$[$0][1]; this.$ = $$[$0-1]; 
break;
case 45: this.$ = ['name', $$[$0]]; 
break;
case 46: this.$ = ['defn', $$[$0]]; 
break;
case 47: this.$ = ['code', $$[$0-1]]; 
break;
case 48: this.$ = ['range', [$$[$0-2], $$[$0-1]]]; 
break;
case 49: this.$ = ['ref', $$[$0]]; 
break;
case 50: this.$ = ['ref', $$[$0].substr(1, $$[$0].length-2)]; 
break;
case 51: this.$ = [$$[$0-2], $$[$0-1], $$[$0]]; 
break;
case 52: this.$ = '<'; 
break;
case 53: this.$ = '='; 
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = $$[$0]; 
break;
case 57: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,9:[2,2],10:[2,2]},{1:[3]},{5:3,9:[1,4],10:[1,5]},{6:6,15:[1,12],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{15:[2,3],50:[2,3],64:[2,3],66:[2,3]},{15:[2,4],50:[2,4],64:[2,4],66:[2,4]},{7:13,8:[2,5],12:[2,5],21:[2,5],31:[2,5],32:[2,5],33:[2,5],39:[2,5],47:[2,5]},{8:[2,40],12:[2,40],13:[2,40],15:[2,40],21:[2,40],31:[2,40],32:[2,40],33:[2,40],36:[2,40],37:[2,40],39:[2,40],45:[2,40],46:[2,40],47:[2,40],50:[2,40],54:[2,40],55:[2,40],58:[2,40],61:[2,40],64:[2,40],66:[2,40]},{8:[2,41],12:[2,41],13:[2,41],15:[2,41],21:[2,41],31:[2,41],32:[2,41],33:[2,41],36:[2,41],37:[2,41],39:[2,41],45:[2,41],46:[2,41],47:[2,41],50:[2,41],54:[2,41],55:[2,41],58:[2,41],61:[2,41],64:[2,41],66:[2,41]},{8:[2,54],12:[2,54],13:[2,54],15:[2,54],21:[2,54],31:[2,54],32:[2,54],33:[2,54],36:[2,54],37:[2,54],39:[2,54],45:[2,54],46:[2,54],47:[2,54],50:[2,54],54:[2,54],55:[2,54],58:[2,54],61:[2,54],64:[2,54],66:[2,54]},{8:[2,55],12:[2,55],13:[2,55],15:[2,55],21:[2,55],31:[2,55],32:[2,55],33:[2,55],36:[2,55],37:[2,55],39:[2,55],45:[2,55],46:[2,55],47:[2,55],50:[2,55],54:[2,55],55:[2,55],58:[2,55],61:[2,55],64:[2,55],66:[2,55]},{8:[2,56],12:[2,56],13:[2,56],15:[2,56],21:[2,56],31:[2,56],32:[2,56],33:[2,56],36:[2,56],37:[2,56],39:[2,56],45:[2,56],46:[2,56],47:[2,56],50:[2,56],54:[2,56],55:[2,56],58:[2,56],61:[2,56],64:[2,56],66:[2,56]},{8:[2,57],12:[2,57],13:[2,57],15:[2,57],21:[2,57],31:[2,57],32:[2,57],33:[2,57],36:[2,57],37:[2,57],39:[2,57],45:[2,57],46:[2,57],47:[2,57],50:[2,57],54:[2,57],55:[2,57],58:[2,57],61:[2,57],64:[2,57],66:[2,57]},{8:[1,14],11:15,12:[1,16],16:17,17:18,18:19,19:20,20:21,21:[1,26],28:22,31:[1,27],32:[1,28],33:[1,23],39:[1,24],47:[1,25]},{1:[2,1]},{8:[2,6],12:[2,6],21:[2,6],31:[2,6],32:[2,6],33:[2,6],39:[2,6],47:[2,6]},{13:[1,29]},{8:[2,8],12:[2,8],21:[2,8],31:[2,8],32:[2,8],33:[2,8],39:[2,8],47:[2,8]},{8:[2,9],12:[2,9],21:[2,9],31:[2,9],32:[2,9],33:[2,9],39:[2,9],47:[2,9]},{8:[2,10],12:[2,10],21:[2,10],31:[2,10],32:[2,10],33:[2,10],39:[2,10],47:[2,10]},{8:[2,11],12:[2,11],21:[2,11],31:[2,11],32:[2,11],33:[2,11],39:[2,11],47:[2,11]},{8:[2,12],12:[2,12],21:[2,12],31:[2,12],32:[2,12],33:[2,12],39:[2,12],47:[2,12]},{6:30,15:[1,12],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{6:31,15:[1,12],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{6:32,15:[1,12],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{6:33,15:[1,12],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{22:[1,34]},{15:[2,19],50:[2,19],64:[2,19],66:[2,19]},{15:[2,20],50:[2,20],64:[2,20],66:[2,20]},{14:[1,35]},{13:[2,43],15:[2,43],29:36,50:[2,43],52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43],64:[2,43],66:[2,43]},{13:[2,43],15:[2,43],29:39,34:38,45:[2,43],50:[2,43],52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43],64:[2,43],66:[2,43]},{13:[2,43],15:[2,43],29:41,40:40,45:[2,43],50:[2,43],52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43],64:[2,43],66:[2,43]},{8:[2,43],12:[2,43],13:[2,43],21:[2,43],29:43,31:[2,43],32:[2,43],33:[2,43],39:[2,43],47:[2,43],48:42,52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43]},{8:[2,13],12:[2,13],21:[2,13],31:[2,13],32:[2,13],33:[2,13],39:[2,13],47:[2,13]},{15:[1,44]},{6:46,15:[1,12],30:45,50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{8:[2,42],12:[2,42],13:[1,48],15:[2,42],21:[2,42],31:[2,42],32:[2,42],33:[2,42],37:[2,42],39:[2,42],45:[2,42],47:[2,42],50:[2,42],53:47,54:[1,49],55:[1,50],58:[1,51],61:[1,52],64:[2,42],66:[2,42]},{8:[2,21],12:[2,21],21:[2,21],31:[2,21],32:[2,21],33:[2,21],39:[2,21],47:[2,21]},{6:56,15:[1,12],38:53,44:54,45:[1,55],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{8:[2,26],12:[2,26],21:[2,26],31:[2,26],32:[2,26],33:[2,26],39:[2,26],47:[2,26]},{6:56,15:[1,12],38:58,43:57,44:54,45:[1,55],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{8:[2,35],12:[2,35],21:[2,35],31:[2,35],32:[2,35],33:[2,35],39:[2,35],47:[2,35]},{8:[2,39],12:[2,39],21:[2,39],31:[2,39],32:[2,39],33:[2,39],37:[2,39],39:[2,39],47:[2,39]},{8:[2,7],12:[2,7],21:[2,7],31:[2,7],32:[2,7],33:[2,7],39:[2,7],47:[2,7]},{8:[2,18],12:[2,18],21:[2,18],31:[2,18],32:[2,18],33:[2,18],39:[2,18],47:[2,18]},{8:[2,24],12:[2,24],21:[2,24],31:[2,24],32:[2,24],33:[2,24],35:59,36:[1,60],39:[2,24],47:[2,24]},{8:[2,44],12:[2,44],13:[2,44],15:[2,44],21:[2,44],31:[2,44],32:[2,44],33:[2,44],37:[2,44],39:[2,44],45:[2,44],47:[2,44],50:[2,44],54:[2,44],55:[2,44],58:[2,44],61:[2,44],64:[2,44],66:[2,44]},{8:[2,45],12:[2,45],13:[2,45],15:[2,45],21:[2,45],31:[2,45],32:[2,45],33:[2,45],37:[2,45],39:[2,45],45:[2,45],47:[2,45],50:[2,45],54:[2,45],55:[2,45],58:[2,45],61:[2,45],64:[2,45],66:[2,45]},{8:[2,46],12:[2,46],13:[2,46],15:[2,46],21:[2,46],31:[2,46],32:[2,46],33:[2,46],37:[2,46],39:[2,46],45:[2,46],47:[2,46],50:[2,46],54:[2,46],55:[2,46],58:[2,46],61:[2,46],64:[2,46],66:[2,46]},{55:[1,63],56:61,62:62,63:[1,64]},{59:[1,65]},{13:[1,67],50:[1,66]},{8:[2,25],12:[2,25],21:[2,25],31:[2,25],32:[2,25],33:[2,25],37:[2,25],39:[2,25],47:[2,25]},{8:[2,33],12:[2,33],15:[2,33],21:[2,33],31:[2,33],32:[2,33],33:[2,33],37:[2,33],39:[2,33],45:[2,33],47:[2,33],50:[2,33],64:[2,33],66:[2,33]},{6:69,15:[1,12],41:68,50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{8:[2,38],12:[2,38],15:[2,38],21:[2,38],31:[2,38],32:[2,38],33:[2,38],36:[1,71],37:[2,38],39:[2,38],45:[2,38],47:[2,38],49:70,50:[2,38],64:[2,38],66:[2,38]},{6:56,8:[2,30],12:[2,30],15:[1,12],21:[2,30],31:[2,30],32:[2,30],33:[2,30],37:[2,30],38:72,39:[2,30],44:54,45:[1,55],47:[2,30],50:[1,7],51:8,64:[1,9],65:10,66:[1,11]},{8:[2,31],12:[2,31],15:[2,31],21:[2,31],31:[2,31],32:[2,31],33:[2,31],37:[2,31],39:[2,31],45:[2,31],47:[2,31],50:[2,31],64:[2,31],66:[2,31]},{8:[2,22],12:[2,22],21:[2,22],31:[2,22],32:[2,22],33:[2,22],39:[2,22],47:[2,22]},{13:[2,43],15:[2,43],29:39,34:73,45:[2,43],50:[2,43],52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43],64:[2,43],66:[2,43]},{57:[1,74]},{13:[1,75]},{13:[2,52]},{13:[2,53]},{59:[1,76]},{8:[2,49],12:[2,49],13:[2,49],15:[2,49],21:[2,49],31:[2,49],32:[2,49],33:[2,49],37:[2,49],39:[2,49],45:[2,49],47:[2,49],50:[2,49],54:[2,49],55:[2,49],58:[2,49],61:[2,49],64:[2,49],66:[2,49]},{8:[2,50],12:[2,50],13:[2,50],15:[2,50],21:[2,50],31:[2,50],32:[2,50],33:[2,50],37:[2,50],39:[2,50],45:[2,50],47:[2,50],50:[2,50],54:[2,50],55:[2,50],58:[2,50],61:[2,50],64:[2,50],66:[2,50]},{46:[1,77]},{36:[1,79],42:78,46:[2,29]},{8:[2,36],12:[2,36],15:[2,36],21:[2,36],31:[2,36],32:[2,36],33:[2,36],37:[2,36],39:[2,36],45:[2,36],47:[2,36],50:[2,36],64:[2,36],66:[2,36]},{13:[2,43],29:43,37:[2,43],48:80,52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43]},{8:[2,32],12:[2,32],15:[2,32],21:[2,32],31:[2,32],32:[2,32],33:[2,32],37:[2,32],39:[2,32],45:[2,32],47:[2,32],50:[2,32],64:[2,32],66:[2,32]},{37:[1,81]},{8:[2,47],12:[2,47],13:[2,47],15:[2,47],21:[2,47],31:[2,47],32:[2,47],33:[2,47],37:[2,47],39:[2,47],45:[2,47],47:[2,47],50:[2,47],54:[2,47],55:[2,47],58:[2,47],61:[2,47],64:[2,47],66:[2,47]},{13:[1,82]},{60:[1,83]},{8:[2,34],12:[2,34],15:[2,34],21:[2,34],31:[2,34],32:[2,34],33:[2,34],37:[2,34],39:[2,34],45:[2,34],47:[2,34],50:[2,34],64:[2,34],66:[2,34]},{46:[2,27]},{13:[2,43],15:[2,43],29:41,40:84,45:[2,43],50:[2,43],52:37,54:[2,43],55:[2,43],58:[2,43],61:[2,43],64:[2,43],66:[2,43]},{37:[1,85]},{8:[2,23],12:[2,23],21:[2,23],31:[2,23],32:[2,23],33:[2,23],39:[2,23],47:[2,23]},{57:[2,51]},{8:[2,48],12:[2,48],13:[2,48],15:[2,48],21:[2,48],31:[2,48],32:[2,48],33:[2,48],37:[2,48],39:[2,48],45:[2,48],47:[2,48],50:[2,48],54:[2,48],55:[2,48],58:[2,48],61:[2,48],64:[2,48],66:[2,48]},{37:[1,86]},{8:[2,37],12:[2,37],15:[2,37],21:[2,37],31:[2,37],32:[2,37],33:[2,37],37:[2,37],39:[2,37],45:[2,37],47:[2,37],50:[2,37],64:[2,37],66:[2,37]},{46:[2,28]}],
defaultActions: {14:[2,1],63:[2,52],64:[2,53],78:[2,27],82:[2,51],86:[2,28]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 9
break;
case 2:return 10
break;
case 3:return 12
break;
case 4:return 14
break;
case 5:return 32
break;
case 6:return 31
break;
case 7:return 33
break;
case 8:return 39
break;
case 9:return 47
break;
case 10:return 47
break;
case 11:return 47
break;
case 12:return 21
break;
case 13:return 25
break;
case 14:return 64
break;
case 15:return 66
break;
case 16:return 15
break;
case 17:return 50
break;
case 18:return 54
break;
case 19:return 13
break;
case 20:return 59
break;
case 21:return ':'
break;
case 22:return 63
break;
case 23:return 61
break;
case 24:return 58
break;
case 25:return 60
break;
case 26:return 36
break;
case 27:return 37
break;
case 28:return 45
break;
case 29:return 46
break;
case 30:return 55
break;
case 31:return 57
break;
case 32:return 8
break;
case 33:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|(\/\/[^\u000a\u000d]*))/,/^(?:[Tt][Aa]:)/,/^(?:[Ll][Ii][Bb][Rr][Aa][Rr][Yy]:)/,/^(?:[Ii][Mm][Pp][Oo][Rr][Tt]:)/,/^(?:[Aa][Ss]:)/,/^(?:[Ee][Ff][Ff][Ii][Cc][Aa][Cc][Yy]:)/,/^(?:[Ss][Aa][Ff][Ee][Tt][Yy]:)/,/^(?:[Oo][Uu][Tt][Cc][Oo][Mm][Ee]:)/,/^(?:[Aa][Ss][Ss][Ee][Ss][Ss][Mm][Ee][Nn][Tt]:)/,/^(?:[Qq][Uu][Aa][Nn][Tt]:)/,/^(?:[Ss][Ss][Xx]:)/,/^(?:[Dd][Ii][Aa][Gg][Pp][Rr][Oo][Cc]:)/,/^(?:[Cc][Oo][Vv][Aa][Rr][Ii][Aa][Tt][Ee][Ss]:)/,/^(?:[Cc][Oo][Nn][Cc][Oo][Mm][Ii][Tt][Aa][Nn][Tt]:)/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(([A-Za-z_])([A-Za-z_0-9-])*))/,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([+-]?[0-9]+))/,/^(?::)/,/^(?:=)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = TAparser;
exports.Parser = TAparser.Parser;
exports.parse = function () { return TAparser.parse.apply(TAparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}