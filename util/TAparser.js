/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var TAparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"TAdecl":3,"PREP":4,"TA_Or_LIBRARY":5,"Name":6,"DeclStar":7,"EOF":8,"TA":9,"LIBRARY":10,"Decl":11,"IMPORT":12,"STRING_LITERAL2":13,"AS":14,"PNAME_NS":15,"EndpointDecl":16,"OutcomeDecl":17,"AssessmentDecl":18,"ObservationDecl":19,"CovariatesList":20,"COVARIATES":21,"Covariate_Star":22,"CovariateStar":23,"Covariate":24,"CONCOMITANT":25,"Medication_Star":26,"HISTORY":27,"SAFETY":28,"EFFICACY":29,"Definition":30,"Outcome":31,"OUTCOME":32,"Outcome_Def":33,"Outcome_Def_Opt":34,"(":35,")":36,"Observation_Or_Assessment":37,"ASSESSMENT":38,"Assessment_Def":39,"Assessment":40,"Assessment_Def_Opt":41,"Observation_Or_Assessment_Plus":42,"Observation":43,"{":44,"}":45,"OBSERVATION":46,"Observation_Def":47,"Observation_Def_Opt":48,"NAME":49,"Iri":50,"Definition_Elt_Star":51,"Definition_Elt":52,"STRING_LITERAL_LONG2":53,"<":54,"CodeDefinition":55,">":56,"[":57,"INTEGER":58,"]":59,"@":60,"RelChar":61,"=":62,"IRIREF":63,"PrefixedName":64,"PNAME_LN":65,"$accept":0,"$end":1},
terminals_: {2:"error",8:"EOF",9:"TA",10:"LIBRARY",12:"IMPORT",13:"STRING_LITERAL2",14:"AS",15:"PNAME_NS",21:"COVARIATES",22:"Covariate_Star",25:"CONCOMITANT",26:"Medication_Star",27:"HISTORY",28:"SAFETY",29:"EFFICACY",32:"OUTCOME",35:"(",36:")",38:"ASSESSMENT",44:"{",45:"}",46:"OBSERVATION",49:"NAME",53:"STRING_LITERAL_LONG2",54:"<",56:">",57:"[",58:"INTEGER",59:"]",60:"@",62:"=",63:"IRIREF",65:"PNAME_LN"},
productions_: [0,[3,5],[4,0],[5,1],[5,1],[7,0],[7,2],[11,4],[11,1],[11,1],[11,1],[11,1],[11,1],[20,2],[23,0],[23,2],[24,2],[24,2],[16,1],[16,4],[17,3],[31,2],[34,3],[34,0],[33,2],[18,3],[40,2],[41,3],[41,0],[39,2],[42,1],[42,2],[37,1],[37,3],[19,3],[43,2],[48,3],[48,0],[47,1],[6,1],[6,1],[30,1],[51,0],[51,2],[52,1],[52,1],[52,3],[52,4],[52,2],[52,2],[55,3],[61,1],[61,1],[50,1],[50,1],[64,1],[64,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		    if ('name' in yy) {
			yy.name = $$[$0-2];
                        yy.type = $$[$0-3];
                    }
		    return yy.decls;
		  
break;
case 2: yy.decls = {};
                    yy.imports = [];
		    yy.decl = function (type, name, ob, line, column) {
		      type = type.substr(0, type.length-1);
		      ob._name = name;
		      ob._ = type;
                      ob.file = yy.file;
                      ob.line = line;
                      ob.column = column;
		      yy.decls[name] = ob;
		      if (type == 'EFFICACY' && 'allEfficacyEndpoints' in yy)
			yy.allEfficacyEndpoints.push(name);
		      return name;
                    } ;
		  
break;
case 3: this.$ = 'TA'; 
break;
case 4: this.$ = 'LIBRARY'; 
break;
case 5: this.$ = null; 
break;
case 6: this.$ = $$[$0-1] + $$[$0]; 
break;
case 7: yy.imports.push([$$[$0], $$[$0-2]]); this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0-1]; 
break;
case 14: this.$ = null; 
break;
case 15: this.$ = $$[$0-1] + $$[$0]; 
break;
case 16: this.$ = $$[$0]; 
break;
case 17: this.$ = $$[$0-1]; 
break;
case 19: this.$ = yy.decl($$[$0-3], $$[$0-2], { definition:$$[$0-1], outcome:$$[$0] }, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 20: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 21: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 22: this.$ = $$[$0-1]; 
break;
case 23: this.$ = null; 
break;
case 24: this.$ = { definition:$$[$0-1], assessment:$$[$0] }; 
break;
case 25: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 26: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 27: this.$ = $$[$0-1]; 
break;
case 28: this.$ = null; 
break;
case 29: this.$ = { definition:$$[$0-1], basedOn:$$[$0] }; 
break;
case 30: this.$ = [ $$[$0] ]; 
break;
case 31: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 32: this.$ = [false, $$[$0]]; 
break;
case 33: this.$ = [true, $$[$0-1]]; 
break;
case 34: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 35: this.$ = $$[$0] ? yy.decl('OBSERVATION', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 36: this.$ = $$[$0-1]; 
break;
case 37: this.$ = null; 
break;
case 38: this.$ = { definition:$$[$0] }; 
break;
case 39: this.$ = $$[$0]; 
break;
case 40: this.$ = $$[$0]; 
break;
case 41: this.$ = $$[$0]; 
break;
case 42: this.$ = {}; 
break;
case 43: $$[$0-1][$$[$0][0]] = $$[$0][1]; this.$ = $$[$0-1]; 
break;
case 44: this.$ = ['name', $$[$0]]; 
break;
case 45: this.$ = ['defn', $$[$0]]; 
break;
case 46: this.$ = ['code', $$[$0-1]]; 
break;
case 47: this.$ = ['range', [$$[$0-2], $$[$0-1]]]; 
break;
case 48: this.$ = ['ref', $$[$0]]; 
break;
case 49: this.$ = ['ref', $$[$0].substr(1, $$[$0].length-2)]; 
break;
case 50: this.$ = [$$[$0-2], $$[$0-1], $$[$0]]; 
break;
case 51: this.$ = '<'; 
break;
case 52: this.$ = '='; 
break;
case 53: this.$ = $$[$0]; 
break;
case 54: this.$ = $$[$0]; 
break;
case 55: this.$ = $$[$0]; 
break;
case 56: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,9:[2,2],10:[2,2]},{1:[3]},{5:3,9:[1,4],10:[1,5]},{6:6,15:[1,12],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{15:[2,3],49:[2,3],63:[2,3],65:[2,3]},{15:[2,4],49:[2,4],63:[2,4],65:[2,4]},{7:13,8:[2,5],12:[2,5],21:[2,5],28:[2,5],29:[2,5],32:[2,5],38:[2,5],46:[2,5]},{8:[2,39],12:[2,39],13:[2,39],15:[2,39],21:[2,39],28:[2,39],29:[2,39],32:[2,39],35:[2,39],36:[2,39],38:[2,39],44:[2,39],45:[2,39],46:[2,39],49:[2,39],53:[2,39],54:[2,39],57:[2,39],60:[2,39],63:[2,39],65:[2,39]},{8:[2,40],12:[2,40],13:[2,40],15:[2,40],21:[2,40],28:[2,40],29:[2,40],32:[2,40],35:[2,40],36:[2,40],38:[2,40],44:[2,40],45:[2,40],46:[2,40],49:[2,40],53:[2,40],54:[2,40],57:[2,40],60:[2,40],63:[2,40],65:[2,40]},{8:[2,53],12:[2,53],13:[2,53],15:[2,53],21:[2,53],28:[2,53],29:[2,53],32:[2,53],35:[2,53],36:[2,53],38:[2,53],44:[2,53],45:[2,53],46:[2,53],49:[2,53],53:[2,53],54:[2,53],57:[2,53],60:[2,53],63:[2,53],65:[2,53]},{8:[2,54],12:[2,54],13:[2,54],15:[2,54],21:[2,54],28:[2,54],29:[2,54],32:[2,54],35:[2,54],36:[2,54],38:[2,54],44:[2,54],45:[2,54],46:[2,54],49:[2,54],53:[2,54],54:[2,54],57:[2,54],60:[2,54],63:[2,54],65:[2,54]},{8:[2,55],12:[2,55],13:[2,55],15:[2,55],21:[2,55],28:[2,55],29:[2,55],32:[2,55],35:[2,55],36:[2,55],38:[2,55],44:[2,55],45:[2,55],46:[2,55],49:[2,55],53:[2,55],54:[2,55],57:[2,55],60:[2,55],63:[2,55],65:[2,55]},{8:[2,56],12:[2,56],13:[2,56],15:[2,56],21:[2,56],28:[2,56],29:[2,56],32:[2,56],35:[2,56],36:[2,56],38:[2,56],44:[2,56],45:[2,56],46:[2,56],49:[2,56],53:[2,56],54:[2,56],57:[2,56],60:[2,56],63:[2,56],65:[2,56]},{8:[1,14],11:15,12:[1,16],16:17,17:18,18:19,19:20,20:21,21:[1,27],28:[1,22],29:[1,23],32:[1,24],38:[1,25],46:[1,26]},{1:[2,1]},{8:[2,6],12:[2,6],21:[2,6],28:[2,6],29:[2,6],32:[2,6],38:[2,6],46:[2,6]},{13:[1,28]},{8:[2,8],12:[2,8],21:[2,8],28:[2,8],29:[2,8],32:[2,8],38:[2,8],46:[2,8]},{8:[2,9],12:[2,9],21:[2,9],28:[2,9],29:[2,9],32:[2,9],38:[2,9],46:[2,9]},{8:[2,10],12:[2,10],21:[2,10],28:[2,10],29:[2,10],32:[2,10],38:[2,10],46:[2,10]},{8:[2,11],12:[2,11],21:[2,11],28:[2,11],29:[2,11],32:[2,11],38:[2,11],46:[2,11]},{8:[2,12],12:[2,12],21:[2,12],28:[2,12],29:[2,12],32:[2,12],38:[2,12],46:[2,12]},{8:[2,18],12:[2,18],21:[2,18],28:[2,18],29:[2,18],32:[2,18],38:[2,18],46:[2,18]},{6:29,15:[1,12],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{6:30,15:[1,12],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{6:31,15:[1,12],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{6:32,15:[1,12],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{22:[1,33]},{14:[1,34]},{13:[2,42],15:[2,42],30:35,49:[2,42],51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42],63:[2,42],65:[2,42]},{13:[2,42],15:[2,42],30:38,33:37,44:[2,42],49:[2,42],51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42],63:[2,42],65:[2,42]},{13:[2,42],15:[2,42],30:40,39:39,44:[2,42],49:[2,42],51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42],63:[2,42],65:[2,42]},{8:[2,42],12:[2,42],13:[2,42],21:[2,42],28:[2,42],29:[2,42],30:42,32:[2,42],38:[2,42],46:[2,42],47:41,51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42]},{8:[2,13],12:[2,13],21:[2,13],28:[2,13],29:[2,13],32:[2,13],38:[2,13],46:[2,13]},{15:[1,43]},{6:45,15:[1,12],31:44,49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{8:[2,41],12:[2,41],13:[1,47],15:[2,41],21:[2,41],28:[2,41],29:[2,41],32:[2,41],36:[2,41],38:[2,41],44:[2,41],46:[2,41],49:[2,41],52:46,53:[1,48],54:[1,49],57:[1,50],60:[1,51],63:[2,41],65:[2,41]},{8:[2,20],12:[2,20],21:[2,20],28:[2,20],29:[2,20],32:[2,20],38:[2,20],46:[2,20]},{6:55,15:[1,12],37:52,43:53,44:[1,54],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{8:[2,25],12:[2,25],21:[2,25],28:[2,25],29:[2,25],32:[2,25],38:[2,25],46:[2,25]},{6:55,15:[1,12],37:57,42:56,43:53,44:[1,54],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{8:[2,34],12:[2,34],21:[2,34],28:[2,34],29:[2,34],32:[2,34],38:[2,34],46:[2,34]},{8:[2,38],12:[2,38],21:[2,38],28:[2,38],29:[2,38],32:[2,38],36:[2,38],38:[2,38],46:[2,38]},{8:[2,7],12:[2,7],21:[2,7],28:[2,7],29:[2,7],32:[2,7],38:[2,7],46:[2,7]},{8:[2,19],12:[2,19],21:[2,19],28:[2,19],29:[2,19],32:[2,19],38:[2,19],46:[2,19]},{8:[2,23],12:[2,23],21:[2,23],28:[2,23],29:[2,23],32:[2,23],34:58,35:[1,59],38:[2,23],46:[2,23]},{8:[2,43],12:[2,43],13:[2,43],15:[2,43],21:[2,43],28:[2,43],29:[2,43],32:[2,43],36:[2,43],38:[2,43],44:[2,43],46:[2,43],49:[2,43],53:[2,43],54:[2,43],57:[2,43],60:[2,43],63:[2,43],65:[2,43]},{8:[2,44],12:[2,44],13:[2,44],15:[2,44],21:[2,44],28:[2,44],29:[2,44],32:[2,44],36:[2,44],38:[2,44],44:[2,44],46:[2,44],49:[2,44],53:[2,44],54:[2,44],57:[2,44],60:[2,44],63:[2,44],65:[2,44]},{8:[2,45],12:[2,45],13:[2,45],15:[2,45],21:[2,45],28:[2,45],29:[2,45],32:[2,45],36:[2,45],38:[2,45],44:[2,45],46:[2,45],49:[2,45],53:[2,45],54:[2,45],57:[2,45],60:[2,45],63:[2,45],65:[2,45]},{54:[1,62],55:60,61:61,62:[1,63]},{58:[1,64]},{13:[1,66],49:[1,65]},{8:[2,24],12:[2,24],21:[2,24],28:[2,24],29:[2,24],32:[2,24],36:[2,24],38:[2,24],46:[2,24]},{8:[2,32],12:[2,32],15:[2,32],21:[2,32],28:[2,32],29:[2,32],32:[2,32],36:[2,32],38:[2,32],44:[2,32],46:[2,32],49:[2,32],63:[2,32],65:[2,32]},{6:68,15:[1,12],40:67,49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{8:[2,37],12:[2,37],15:[2,37],21:[2,37],28:[2,37],29:[2,37],32:[2,37],35:[1,70],36:[2,37],38:[2,37],44:[2,37],46:[2,37],48:69,49:[2,37],63:[2,37],65:[2,37]},{6:55,8:[2,29],12:[2,29],15:[1,12],21:[2,29],28:[2,29],29:[2,29],32:[2,29],36:[2,29],37:71,38:[2,29],43:53,44:[1,54],46:[2,29],49:[1,7],50:8,63:[1,9],64:10,65:[1,11]},{8:[2,30],12:[2,30],15:[2,30],21:[2,30],28:[2,30],29:[2,30],32:[2,30],36:[2,30],38:[2,30],44:[2,30],46:[2,30],49:[2,30],63:[2,30],65:[2,30]},{8:[2,21],12:[2,21],21:[2,21],28:[2,21],29:[2,21],32:[2,21],38:[2,21],46:[2,21]},{13:[2,42],15:[2,42],30:38,33:72,44:[2,42],49:[2,42],51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42],63:[2,42],65:[2,42]},{56:[1,73]},{13:[1,74]},{13:[2,51]},{13:[2,52]},{58:[1,75]},{8:[2,48],12:[2,48],13:[2,48],15:[2,48],21:[2,48],28:[2,48],29:[2,48],32:[2,48],36:[2,48],38:[2,48],44:[2,48],46:[2,48],49:[2,48],53:[2,48],54:[2,48],57:[2,48],60:[2,48],63:[2,48],65:[2,48]},{8:[2,49],12:[2,49],13:[2,49],15:[2,49],21:[2,49],28:[2,49],29:[2,49],32:[2,49],36:[2,49],38:[2,49],44:[2,49],46:[2,49],49:[2,49],53:[2,49],54:[2,49],57:[2,49],60:[2,49],63:[2,49],65:[2,49]},{45:[1,76]},{35:[1,78],41:77,45:[2,28]},{8:[2,35],12:[2,35],15:[2,35],21:[2,35],28:[2,35],29:[2,35],32:[2,35],36:[2,35],38:[2,35],44:[2,35],46:[2,35],49:[2,35],63:[2,35],65:[2,35]},{13:[2,42],30:42,36:[2,42],47:79,51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42]},{8:[2,31],12:[2,31],15:[2,31],21:[2,31],28:[2,31],29:[2,31],32:[2,31],36:[2,31],38:[2,31],44:[2,31],46:[2,31],49:[2,31],63:[2,31],65:[2,31]},{36:[1,80]},{8:[2,46],12:[2,46],13:[2,46],15:[2,46],21:[2,46],28:[2,46],29:[2,46],32:[2,46],36:[2,46],38:[2,46],44:[2,46],46:[2,46],49:[2,46],53:[2,46],54:[2,46],57:[2,46],60:[2,46],63:[2,46],65:[2,46]},{13:[1,81]},{59:[1,82]},{8:[2,33],12:[2,33],15:[2,33],21:[2,33],28:[2,33],29:[2,33],32:[2,33],36:[2,33],38:[2,33],44:[2,33],46:[2,33],49:[2,33],63:[2,33],65:[2,33]},{45:[2,26]},{13:[2,42],15:[2,42],30:40,39:83,44:[2,42],49:[2,42],51:36,53:[2,42],54:[2,42],57:[2,42],60:[2,42],63:[2,42],65:[2,42]},{36:[1,84]},{8:[2,22],12:[2,22],21:[2,22],28:[2,22],29:[2,22],32:[2,22],38:[2,22],46:[2,22]},{56:[2,50]},{8:[2,47],12:[2,47],13:[2,47],15:[2,47],21:[2,47],28:[2,47],29:[2,47],32:[2,47],36:[2,47],38:[2,47],44:[2,47],46:[2,47],49:[2,47],53:[2,47],54:[2,47],57:[2,47],60:[2,47],63:[2,47],65:[2,47]},{36:[1,85]},{8:[2,36],12:[2,36],15:[2,36],21:[2,36],28:[2,36],29:[2,36],32:[2,36],36:[2,36],38:[2,36],44:[2,36],46:[2,36],49:[2,36],63:[2,36],65:[2,36]},{45:[2,27]}],
defaultActions: {14:[2,1],62:[2,51],63:[2,52],77:[2,26],81:[2,50],85:[2,27]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 9
break;
case 2:return 10
break;
case 3:return 12
break;
case 4:return 14
break;
case 5:return 29
break;
case 6:return 28
break;
case 7:return 32
break;
case 8:return 38
break;
case 9:return 46
break;
case 10:return 46
break;
case 11:return 46
break;
case 12:return 21
break;
case 13:return 25
break;
case 14:return 63
break;
case 15:return 65
break;
case 16:return 15
break;
case 17:return 49
break;
case 18:return 53
break;
case 19:return 13
break;
case 20:return 58
break;
case 21:return ':'
break;
case 22:return 62
break;
case 23:return 60
break;
case 24:return 57
break;
case 25:return 59
break;
case 26:return 35
break;
case 27:return 36
break;
case 28:return 44
break;
case 29:return 45
break;
case 30:return 54
break;
case 31:return 56
break;
case 32:return 8
break;
case 33:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|(\/\/[^\u000a\u000d]*))/,/^(?:[Tt][Aa]:)/,/^(?:[Ll][Ii][Bb][Rr][Aa][Rr][Yy]:)/,/^(?:[Ii][Mm][Pp][Oo][Rr][Tt]:)/,/^(?:[Aa][Ss]:)/,/^(?:[Ee][Ff][Ff][Ii][Cc][Aa][Cc][Yy]:)/,/^(?:[Ss][Aa][Ff][Ee][Tt][Yy]:)/,/^(?:[Oo][Uu][Tt][Cc][Oo][Mm][Ee]:)/,/^(?:[Aa][Ss][Ss][Ee][Ss][Ss][Mm][Ee][Nn][Tt]:)/,/^(?:[Qq][Uu][Aa][Nn][Tt]:)/,/^(?:[Ss][Ss][Xx]:)/,/^(?:[Dd][Ii][Aa][Gg][Pp][Rr][Oo][Cc]:)/,/^(?:[Cc][Oo][Vv][Aa][Rr][Ii][Aa][Tt][Ee][Ss]:)/,/^(?:[Cc][Oo][Nn][Cc][Oo][Mm][Ii][Tt][Aa][Nn][Tt]:)/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(([A-Za-z_])([A-Za-z_0-9-])*))/,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([+-]?[0-9]+))/,/^(?::)/,/^(?:=)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = TAparser;
exports.Parser = TAparser.Parser;
exports.parse = function () { return TAparser.parse.apply(TAparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}