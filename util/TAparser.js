/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var TAparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"TAdecl":3,"PREP":4,"TA_Or_LIBRARY":5,"Name":6,"DeclStar":7,"EOF":8,"TA":9,"LIBRARY":10,"Decl":11,"IMPORT":12,"STRING_LITERAL2":13,"AS":14,"PNAME_NS":15,"EndpointDecl":16,"OutcomeDecl":17,"AssessmentDecl":18,"ObservationDecl":19,"ENDPOINT":20,"Definition":21,"Outcome":22,"OUTCOME":23,"Outcome_Def":24,"Outcome_Def_Opt":25,"(":26,")":27,"Assessment":28,"ASSESSMENT":29,"Assessment_Def":30,"Assessment_Def_Opt":31,"Observation_Or_Assessment_Plus":32,"Observation_Or_Assessment":33,"Observation":34,"{":35,"}":36,"OBSERVATION":37,"Observation_Def":38,"Observation_Def_Opt":39,"NAME":40,"Iri":41,"Definition_Elt_Star":42,"Definition_Elt":43,"STRING_LITERAL_LONG2":44,"<":45,"CodeDefinition":46,">":47,"[":48,"INTEGER":49,"]":50,"@":51,"RelChar":52,"=":53,"IRIREF":54,"PrefixedName":55,"PNAME_LN":56,"$accept":0,"$end":1},
terminals_: {2:"error",8:"EOF",9:"TA",10:"LIBRARY",12:"IMPORT",13:"STRING_LITERAL2",14:"AS",15:"PNAME_NS",20:"ENDPOINT",23:"OUTCOME",26:"(",27:")",29:"ASSESSMENT",35:"{",36:"}",37:"OBSERVATION",40:"NAME",44:"STRING_LITERAL_LONG2",45:"<",47:">",48:"[",49:"INTEGER",50:"]",51:"@",53:"=",54:"IRIREF",56:"PNAME_LN"},
productions_: [0,[3,5],[4,0],[5,1],[5,1],[7,0],[7,2],[11,4],[11,1],[11,1],[11,1],[11,1],[16,4],[17,3],[22,2],[25,3],[25,0],[24,2],[18,3],[28,2],[31,3],[31,0],[30,2],[32,1],[32,2],[33,1],[33,3],[19,3],[34,2],[39,3],[39,0],[38,1],[6,1],[6,1],[21,1],[42,0],[42,2],[43,1],[43,1],[43,3],[43,4],[43,2],[43,2],[46,3],[52,1],[52,1],[41,1],[41,1],[55,1],[55,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		    if ('name' in yy) {
			yy.name = $$[$0-2];
                        yy.type = $$[$0-3];
                    }
		    return yy.decls;
		  
break;
case 2: yy.decls = {};
                    yy.imports = [];
		    yy.decl = function (type, name, ob, line, column) {
		      type = type.substr(0, type.length-1);
		      ob._name = name;
		      ob._ = type;
                      ob.file = yy.file;
                      ob.line = line;
                      ob.column = column;
		      yy.decls[name] = ob;
		      if (type == 'ENDPOINT' && 'allEndpoints' in yy)
			yy.allEndpoints.push(name);
		      return name;
                    } ;
		  
break;
case 3: this.$ = 'TA'; 
break;
case 4: this.$ = 'LIBRARY'; 
break;
case 5: this.$ = null; 
break;
case 6: this.$ = $$[$0-1] + $$[$0]; 
break;
case 7: yy.imports.push([$$[$0], $$[$0-2]]); this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = $$[$0]; 
break;
case 10: this.$ = $$[$0]; 
break;
case 11: this.$ = $$[$0]; 
break;
case 12: this.$ = yy.decl($$[$0-3], $$[$0-2], { definition:$$[$0-1], outcome:$$[$0] }, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 13: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 14: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 15: this.$ = $$[$0-1]; 
break;
case 16: this.$ = null; 
break;
case 17: this.$ = { definition:$$[$0-1], assessment:$$[$0] }; 
break;
case 18: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 19: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 20: this.$ = $$[$0-1]; 
break;
case 21: this.$ = null; 
break;
case 22: this.$ = { definition:$$[$0-1], basedOn:$$[$0] }; 
break;
case 23: this.$ = [ $$[$0] ]; 
break;
case 24: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 25: this.$ = [false, $$[$0]]; 
break;
case 26: this.$ = [true, $$[$0-1]]; 
break;
case 27: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 28: this.$ = $$[$0] ? yy.decl('OBSERVATION', $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) : $$[$0-1]; 
break;
case 29: this.$ = $$[$0-1]; 
break;
case 30: this.$ = null; 
break;
case 31: this.$ = { definition:$$[$0] }; 
break;
case 32: this.$ = $$[$0]; 
break;
case 33: this.$ = $$[$0]; 
break;
case 34: this.$ = $$[$0]; 
break;
case 35: this.$ = {}; 
break;
case 36: $$[$0-1][$$[$0][0]] = $$[$0][1]; this.$ = $$[$0-1]; 
break;
case 37: this.$ = ['name', $$[$0]]; 
break;
case 38: this.$ = ['defn', $$[$0]]; 
break;
case 39: this.$ = ['code', $$[$0-1]]; 
break;
case 40: this.$ = ['range', [$$[$0-2], $$[$0-1]]]; 
break;
case 41: this.$ = ['ref', $$[$0]]; 
break;
case 42: this.$ = ['ref', $$[$0].substr(1, $$[$0].length-2)]; 
break;
case 43: this.$ = [$$[$0-2], $$[$0-1], $$[$0]]; 
break;
case 44: this.$ = '<'; 
break;
case 45: this.$ = '='; 
break;
case 46: this.$ = $$[$0]; 
break;
case 47: this.$ = $$[$0]; 
break;
case 48: this.$ = $$[$0]; 
break;
case 49: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,9:[2,2],10:[2,2]},{1:[3]},{5:3,9:[1,4],10:[1,5]},{6:6,15:[1,12],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{15:[2,3],40:[2,3],54:[2,3],56:[2,3]},{15:[2,4],40:[2,4],54:[2,4],56:[2,4]},{7:13,8:[2,5],12:[2,5],20:[2,5],23:[2,5],29:[2,5],37:[2,5]},{8:[2,32],12:[2,32],13:[2,32],15:[2,32],20:[2,32],23:[2,32],26:[2,32],27:[2,32],29:[2,32],35:[2,32],36:[2,32],37:[2,32],40:[2,32],44:[2,32],45:[2,32],48:[2,32],51:[2,32],54:[2,32],56:[2,32]},{8:[2,33],12:[2,33],13:[2,33],15:[2,33],20:[2,33],23:[2,33],26:[2,33],27:[2,33],29:[2,33],35:[2,33],36:[2,33],37:[2,33],40:[2,33],44:[2,33],45:[2,33],48:[2,33],51:[2,33],54:[2,33],56:[2,33]},{8:[2,46],12:[2,46],13:[2,46],15:[2,46],20:[2,46],23:[2,46],26:[2,46],27:[2,46],29:[2,46],35:[2,46],36:[2,46],37:[2,46],40:[2,46],44:[2,46],45:[2,46],48:[2,46],51:[2,46],54:[2,46],56:[2,46]},{8:[2,47],12:[2,47],13:[2,47],15:[2,47],20:[2,47],23:[2,47],26:[2,47],27:[2,47],29:[2,47],35:[2,47],36:[2,47],37:[2,47],40:[2,47],44:[2,47],45:[2,47],48:[2,47],51:[2,47],54:[2,47],56:[2,47]},{8:[2,48],12:[2,48],13:[2,48],15:[2,48],20:[2,48],23:[2,48],26:[2,48],27:[2,48],29:[2,48],35:[2,48],36:[2,48],37:[2,48],40:[2,48],44:[2,48],45:[2,48],48:[2,48],51:[2,48],54:[2,48],56:[2,48]},{8:[2,49],12:[2,49],13:[2,49],15:[2,49],20:[2,49],23:[2,49],26:[2,49],27:[2,49],29:[2,49],35:[2,49],36:[2,49],37:[2,49],40:[2,49],44:[2,49],45:[2,49],48:[2,49],51:[2,49],54:[2,49],56:[2,49]},{8:[1,14],11:15,12:[1,16],16:17,17:18,18:19,19:20,20:[1,21],23:[1,22],29:[1,23],37:[1,24]},{1:[2,1]},{8:[2,6],12:[2,6],20:[2,6],23:[2,6],29:[2,6],37:[2,6]},{13:[1,25]},{8:[2,8],12:[2,8],20:[2,8],23:[2,8],29:[2,8],37:[2,8]},{8:[2,9],12:[2,9],20:[2,9],23:[2,9],29:[2,9],37:[2,9]},{8:[2,10],12:[2,10],20:[2,10],23:[2,10],29:[2,10],37:[2,10]},{8:[2,11],12:[2,11],20:[2,11],23:[2,11],29:[2,11],37:[2,11]},{6:26,15:[1,12],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{6:27,15:[1,12],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{6:28,15:[1,12],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{6:29,15:[1,12],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{14:[1,30]},{13:[2,35],15:[2,35],21:31,40:[2,35],42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35],54:[2,35],56:[2,35]},{13:[2,35],15:[2,35],21:34,24:33,40:[2,35],42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35],54:[2,35],56:[2,35]},{13:[2,35],15:[2,35],21:36,30:35,35:[2,35],40:[2,35],42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35],54:[2,35],56:[2,35]},{8:[2,35],12:[2,35],13:[2,35],20:[2,35],21:38,23:[2,35],29:[2,35],37:[2,35],38:37,42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35]},{15:[1,39]},{6:41,15:[1,12],22:40,40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{8:[2,34],12:[2,34],13:[1,43],15:[2,34],20:[2,34],23:[2,34],27:[2,34],29:[2,34],35:[2,34],37:[2,34],40:[2,34],43:42,44:[1,44],45:[1,45],48:[1,46],51:[1,47],54:[2,34],56:[2,34]},{8:[2,13],12:[2,13],20:[2,13],23:[2,13],29:[2,13],37:[2,13]},{6:49,15:[1,12],28:48,40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{8:[2,18],12:[2,18],20:[2,18],23:[2,18],29:[2,18],37:[2,18]},{6:54,15:[1,12],32:50,33:51,34:52,35:[1,53],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{8:[2,27],12:[2,27],20:[2,27],23:[2,27],29:[2,27],37:[2,27]},{8:[2,31],12:[2,31],20:[2,31],23:[2,31],27:[2,31],29:[2,31],37:[2,31]},{8:[2,7],12:[2,7],20:[2,7],23:[2,7],29:[2,7],37:[2,7]},{8:[2,12],12:[2,12],20:[2,12],23:[2,12],29:[2,12],37:[2,12]},{8:[2,16],12:[2,16],20:[2,16],23:[2,16],25:55,26:[1,56],29:[2,16],37:[2,16]},{8:[2,36],12:[2,36],13:[2,36],15:[2,36],20:[2,36],23:[2,36],27:[2,36],29:[2,36],35:[2,36],37:[2,36],40:[2,36],44:[2,36],45:[2,36],48:[2,36],51:[2,36],54:[2,36],56:[2,36]},{8:[2,37],12:[2,37],13:[2,37],15:[2,37],20:[2,37],23:[2,37],27:[2,37],29:[2,37],35:[2,37],37:[2,37],40:[2,37],44:[2,37],45:[2,37],48:[2,37],51:[2,37],54:[2,37],56:[2,37]},{8:[2,38],12:[2,38],13:[2,38],15:[2,38],20:[2,38],23:[2,38],27:[2,38],29:[2,38],35:[2,38],37:[2,38],40:[2,38],44:[2,38],45:[2,38],48:[2,38],51:[2,38],54:[2,38],56:[2,38]},{45:[1,59],46:57,52:58,53:[1,60]},{49:[1,61]},{13:[1,63],40:[1,62]},{8:[2,17],12:[2,17],20:[2,17],23:[2,17],27:[2,17],29:[2,17],37:[2,17]},{8:[2,21],12:[2,21],20:[2,21],23:[2,21],26:[1,65],27:[2,21],29:[2,21],31:64,36:[2,21],37:[2,21]},{6:54,8:[2,22],12:[2,22],15:[1,12],20:[2,22],23:[2,22],27:[2,22],29:[2,22],33:66,34:52,35:[1,53],37:[2,22],40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{8:[2,23],12:[2,23],15:[2,23],20:[2,23],23:[2,23],27:[2,23],29:[2,23],35:[2,23],37:[2,23],40:[2,23],54:[2,23],56:[2,23]},{8:[2,25],12:[2,25],15:[2,25],20:[2,25],23:[2,25],27:[2,25],29:[2,25],35:[2,25],37:[2,25],40:[2,25],54:[2,25],56:[2,25]},{6:49,15:[1,12],28:67,40:[1,7],41:8,54:[1,9],55:10,56:[1,11]},{8:[2,30],12:[2,30],15:[2,30],20:[2,30],23:[2,30],26:[1,69],27:[2,30],29:[2,30],35:[2,30],37:[2,30],39:68,40:[2,30],54:[2,30],56:[2,30]},{8:[2,14],12:[2,14],20:[2,14],23:[2,14],29:[2,14],37:[2,14]},{13:[2,35],15:[2,35],21:34,24:70,40:[2,35],42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35],54:[2,35],56:[2,35]},{47:[1,71]},{13:[1,72]},{13:[2,44]},{13:[2,45]},{49:[1,73]},{8:[2,41],12:[2,41],13:[2,41],15:[2,41],20:[2,41],23:[2,41],27:[2,41],29:[2,41],35:[2,41],37:[2,41],40:[2,41],44:[2,41],45:[2,41],48:[2,41],51:[2,41],54:[2,41],56:[2,41]},{8:[2,42],12:[2,42],13:[2,42],15:[2,42],20:[2,42],23:[2,42],27:[2,42],29:[2,42],35:[2,42],37:[2,42],40:[2,42],44:[2,42],45:[2,42],48:[2,42],51:[2,42],54:[2,42],56:[2,42]},{8:[2,19],12:[2,19],20:[2,19],23:[2,19],27:[2,19],29:[2,19],36:[2,19],37:[2,19]},{13:[2,35],15:[2,35],21:36,30:74,35:[2,35],40:[2,35],42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35],54:[2,35],56:[2,35]},{8:[2,24],12:[2,24],15:[2,24],20:[2,24],23:[2,24],27:[2,24],29:[2,24],35:[2,24],37:[2,24],40:[2,24],54:[2,24],56:[2,24]},{36:[1,75]},{8:[2,28],12:[2,28],15:[2,28],20:[2,28],23:[2,28],27:[2,28],29:[2,28],35:[2,28],37:[2,28],40:[2,28],54:[2,28],56:[2,28]},{13:[2,35],21:38,27:[2,35],38:76,42:32,44:[2,35],45:[2,35],48:[2,35],51:[2,35]},{27:[1,77]},{8:[2,39],12:[2,39],13:[2,39],15:[2,39],20:[2,39],23:[2,39],27:[2,39],29:[2,39],35:[2,39],37:[2,39],40:[2,39],44:[2,39],45:[2,39],48:[2,39],51:[2,39],54:[2,39],56:[2,39]},{13:[1,78]},{50:[1,79]},{27:[1,80]},{8:[2,26],12:[2,26],15:[2,26],20:[2,26],23:[2,26],27:[2,26],29:[2,26],35:[2,26],37:[2,26],40:[2,26],54:[2,26],56:[2,26]},{27:[1,81]},{8:[2,15],12:[2,15],20:[2,15],23:[2,15],29:[2,15],37:[2,15]},{47:[2,43]},{8:[2,40],12:[2,40],13:[2,40],15:[2,40],20:[2,40],23:[2,40],27:[2,40],29:[2,40],35:[2,40],37:[2,40],40:[2,40],44:[2,40],45:[2,40],48:[2,40],51:[2,40],54:[2,40],56:[2,40]},{8:[2,20],12:[2,20],20:[2,20],23:[2,20],27:[2,20],29:[2,20],36:[2,20],37:[2,20]},{8:[2,29],12:[2,29],15:[2,29],20:[2,29],23:[2,29],27:[2,29],29:[2,29],35:[2,29],37:[2,29],40:[2,29],54:[2,29],56:[2,29]}],
defaultActions: {14:[2,1],59:[2,44],60:[2,45],78:[2,43]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 9
break;
case 2:return 10
break;
case 3:return 12
break;
case 4:return 14
break;
case 5:return 20
break;
case 6:return 23
break;
case 7:return 29
break;
case 8:return 37
break;
case 9:return 37
break;
case 10:return 37
break;
case 11:return 54
break;
case 12:return 56
break;
case 13:return 15
break;
case 14:return 40
break;
case 15:return 44
break;
case 16:return 13
break;
case 17:return 49
break;
case 18:return ':'
break;
case 19:return 53
break;
case 20:return 51
break;
case 21:return 48
break;
case 22:return 50
break;
case 23:return 26
break;
case 24:return 27
break;
case 25:return 35
break;
case 26:return 36
break;
case 27:return 45
break;
case 28:return 47
break;
case 29:return 8
break;
case 30:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|(\/\/[^\u000a\u000d]*))/,/^(?:[Tt][Aa]:)/,/^(?:[Ll][Ii][Bb][Rr][Aa][Rr][Yy]:)/,/^(?:[Ii][Mm][Pp][Oo][Rr][Tt]:)/,/^(?:[Aa][Ss]:)/,/^(?:[Ee][Nn][Dd][Pp][Oo][Ii][Nn][Tt]:)/,/^(?:[Oo][Uu][Tt][Cc][Oo][Mm][Ee]:)/,/^(?:[Aa][Ss][Ss][Ee][Ss][Ss][Mm][Ee][Nn][Tt]:)/,/^(?:[Qq][Uu][Aa][Nn][Tt]:)/,/^(?:[Ss][Ss][Xx]:)/,/^(?:[Dd][Ii][Aa][Gg][Pp][Rr][Oo][Cc]:)/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(([A-Za-z_])([A-Za-z_0-9-])*))/,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([+-]?[0-9]+))/,/^(?::)/,/^(?:=)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = TAparser;
exports.Parser = TAparser.Parser;
exports.parse = function () { return TAparser.parse.apply(TAparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}