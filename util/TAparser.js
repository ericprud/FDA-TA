/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var TAparser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"TAdecl":3,"PREP":4,"TA":5,"Name":6,"DeclStar":7,"EOF":8,"Decl":9,"EndpointDecl":10,"OutcomeDecl":11,"AssessmentDecl":12,"ObservationDecl":13,"ENDPOINT":14,"Definition":15,"Outcome":16,"OUTCOME":17,"Outcome_Def":18,"Outcome_Def_Opt":19,"(":20,")":21,"Assessment":22,"ASSESSMENT":23,"Assessment_Def":24,"Assessment_Def_Opt":25,"Observation_Or_Assessment_Plus":26,"Observation_Or_Assessment":27,"Observation":28,"{":29,"}":30,"OBSERVATION":31,"Observation_Def":32,"Observation_Def_Opt":33,"NAME":34,"iri":35,"Definition_Elt_Star":36,"Definition_Elt":37,"STRING_LITERAL2":38,"STRING_LITERAL_LONG2":39,"[":40,"CodeDefinition":41,"]":42,"@":43,"RelChar":44,"<":45,"=":46,"Iri":47,"IRIREF":48,"PrefixedName":49,"PNAME_LN":50,"PNAME_NS":51,"$accept":0,"$end":1},
terminals_: {2:"error",5:"TA",8:"EOF",14:"ENDPOINT",17:"OUTCOME",20:"(",21:")",23:"ASSESSMENT",29:"{",30:"}",31:"OBSERVATION",34:"NAME",35:"iri",38:"STRING_LITERAL2",39:"STRING_LITERAL_LONG2",40:"[",42:"]",43:"@",45:"<",46:"=",48:"IRIREF",50:"PNAME_LN",51:"PNAME_NS"},
productions_: [0,[3,5],[4,0],[7,0],[7,2],[9,1],[9,1],[9,1],[9,1],[10,4],[11,3],[16,2],[19,3],[19,0],[18,2],[12,3],[22,2],[25,3],[25,0],[24,2],[26,1],[26,2],[27,1],[27,3],[13,3],[28,2],[33,3],[33,0],[32,1],[6,1],[6,1],[15,1],[36,0],[36,2],[37,1],[37,1],[37,3],[37,2],[37,2],[41,3],[44,1],[44,1],[47,1],[47,1],[49,1],[49,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
		    if ('name' in yy)
			yy.name = $$[$0-2];
		    return yy.decls;
		  
break;
case 2: yy.decls = {};
		    yy.decl = function (type, name, ob) {
		      type = type.substr(0, type.length-1);
		      ob._name = name;
		      ob._ = type;
		      yy.decls[name] = ob;
		      if (type == 'ENDPOINT' && 'allEndpoints' in yy)
			yy.allEndpoints.push(name);
		      return name;
                    } ;
		  
break;
case 3: this.$ = null; 
break;
case 4: this.$ = $$[$0-1] + $$[$0]; 
break;
case 5: this.$ = $$[$0]; 
break;
case 6: this.$ = $$[$0]; 
break;
case 7: this.$ = $$[$0]; 
break;
case 8: this.$ = $$[$0]; 
break;
case 9: this.$ = yy.decl($$[$0-3], $$[$0-2], { definition:$$[$0-1], outcome:$$[$0] }); 
break;
case 10: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 11: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0]) : $$[$0-1]; 
break;
case 12: this.$ = $$[$0-1]; 
break;
case 13: this.$ = null; 
break;
case 14: this.$ = { definition:$$[$0-1], assessment:$$[$0] }; 
break;
case 15: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 16: this.$ = $$[$0] ? yy.decl('OUTCOME', $$[$0-1], $$[$0]) : $$[$0-1]; 
break;
case 17: this.$ = $$[$0-1]; 
break;
case 18: this.$ = null; 
break;
case 19: this.$ = { definition:$$[$0-1], basedOn:$$[$0] }; 
break;
case 20: this.$ = [ $$[$0] ]; 
break;
case 21: this.$ = $$[$0-1].concat($$[$0]); 
break;
case 22: this.$ = $$[$0]; 
break;
case 23: this.$ = $$[$0-1]; 
break;
case 24: this.$ = yy.decl($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 25: this.$ = $$[$0] ? yy.decl('OBSERVATION', $$[$0-1], $$[$0]) : $$[$0-1]; 
break;
case 26: this.$ = $$[$0-1]; 
break;
case 27: this.$ = null; 
break;
case 28: this.$ = { definition:$$[$0] }; 
break;
case 29: this.$ = $$[$0]; 
break;
case 30: this.$ = $$[$0]; 
break;
case 31: this.$ = $$[$0]; 
break;
case 32: this.$ = {}; 
break;
case 33: $$[$0-1][$$[$0][0]] = $$[$0][1]; this.$ = $$[$0-1]; 
break;
case 34: this.$ = ['name', $$[$0]]; 
break;
case 35: this.$ = ['defn', $$[$0]]; 
break;
case 36: this.$ = ['code', $$[$0-1]]; 
break;
case 37: this.$ = ['ref', $$[$0]]; 
break;
case 38: this.$ = ['ref', $$[$0].substr(1, $$[$0].length-2)]; 
break;
case 39: this.$ = [$$[$0-2], $$[$0-1], $$[$0]]; 
break;
case 40: this.$ = '<'; 
break;
case 41: this.$ = '='; 
break;
case 42: this.$ = $$[$0]; 
break;
case 43: this.$ = $$[$0]; 
break;
case 44: this.$ = $$[$0]; 
break;
case 45: this.$ = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:[2,2]},{1:[3]},{5:[1,3]},{6:4,34:[1,5],35:[1,6]},{7:7,8:[2,3],14:[2,3],17:[2,3],23:[2,3],31:[2,3]},{8:[2,29],14:[2,29],17:[2,29],20:[2,29],21:[2,29],23:[2,29],29:[2,29],30:[2,29],31:[2,29],34:[2,29],35:[2,29],38:[2,29],39:[2,29],40:[2,29],43:[2,29]},{8:[2,30],14:[2,30],17:[2,30],20:[2,30],21:[2,30],23:[2,30],29:[2,30],30:[2,30],31:[2,30],34:[2,30],35:[2,30],38:[2,30],39:[2,30],40:[2,30],43:[2,30]},{8:[1,8],9:9,10:10,11:11,12:12,13:13,14:[1,14],17:[1,15],23:[1,16],31:[1,17]},{1:[2,1]},{8:[2,4],14:[2,4],17:[2,4],23:[2,4],31:[2,4]},{8:[2,5],14:[2,5],17:[2,5],23:[2,5],31:[2,5]},{8:[2,6],14:[2,6],17:[2,6],23:[2,6],31:[2,6]},{8:[2,7],14:[2,7],17:[2,7],23:[2,7],31:[2,7]},{8:[2,8],14:[2,8],17:[2,8],23:[2,8],31:[2,8]},{6:18,34:[1,5],35:[1,6]},{6:19,34:[1,5],35:[1,6]},{6:20,34:[1,5],35:[1,6]},{6:21,34:[1,5],35:[1,6]},{15:22,34:[2,32],35:[2,32],36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{15:25,18:24,34:[2,32],35:[2,32],36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{15:27,24:26,29:[2,32],34:[2,32],35:[2,32],36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{8:[2,32],14:[2,32],15:29,17:[2,32],23:[2,32],31:[2,32],32:28,36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{6:31,16:30,34:[1,5],35:[1,6]},{8:[2,31],14:[2,31],17:[2,31],21:[2,31],23:[2,31],29:[2,31],31:[2,31],34:[2,31],35:[2,31],37:32,38:[1,33],39:[1,34],40:[1,35],43:[1,36]},{8:[2,10],14:[2,10],17:[2,10],23:[2,10],31:[2,10]},{6:38,22:37,34:[1,5],35:[1,6]},{8:[2,15],14:[2,15],17:[2,15],23:[2,15],31:[2,15]},{6:43,26:39,27:40,28:41,29:[1,42],34:[1,5],35:[1,6]},{8:[2,24],14:[2,24],17:[2,24],23:[2,24],31:[2,24]},{8:[2,28],14:[2,28],17:[2,28],21:[2,28],23:[2,28],31:[2,28]},{8:[2,9],14:[2,9],17:[2,9],23:[2,9],31:[2,9]},{8:[2,13],14:[2,13],17:[2,13],19:44,20:[1,45],23:[2,13],31:[2,13]},{8:[2,33],14:[2,33],17:[2,33],21:[2,33],23:[2,33],29:[2,33],31:[2,33],34:[2,33],35:[2,33],38:[2,33],39:[2,33],40:[2,33],43:[2,33]},{8:[2,34],14:[2,34],17:[2,34],21:[2,34],23:[2,34],29:[2,34],31:[2,34],34:[2,34],35:[2,34],38:[2,34],39:[2,34],40:[2,34],43:[2,34]},{8:[2,35],14:[2,35],17:[2,35],21:[2,35],23:[2,35],29:[2,35],31:[2,35],34:[2,35],35:[2,35],38:[2,35],39:[2,35],40:[2,35],43:[2,35]},{41:46,44:47,45:[1,48],46:[1,49]},{34:[1,50],38:[1,51]},{8:[2,14],14:[2,14],17:[2,14],21:[2,14],23:[2,14],31:[2,14]},{8:[2,18],14:[2,18],17:[2,18],20:[1,53],21:[2,18],23:[2,18],25:52,30:[2,18],31:[2,18]},{6:43,8:[2,19],14:[2,19],17:[2,19],21:[2,19],23:[2,19],27:54,28:41,29:[1,42],31:[2,19],34:[1,5],35:[1,6]},{8:[2,20],14:[2,20],17:[2,20],21:[2,20],23:[2,20],29:[2,20],31:[2,20],34:[2,20],35:[2,20]},{8:[2,22],14:[2,22],17:[2,22],21:[2,22],23:[2,22],29:[2,22],31:[2,22],34:[2,22],35:[2,22]},{6:38,22:55,34:[1,5],35:[1,6]},{8:[2,27],14:[2,27],17:[2,27],20:[1,57],21:[2,27],23:[2,27],29:[2,27],31:[2,27],33:56,34:[2,27],35:[2,27]},{8:[2,11],14:[2,11],17:[2,11],23:[2,11],31:[2,11]},{15:25,18:58,34:[2,32],35:[2,32],36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{42:[1,59]},{38:[1,60]},{38:[2,40]},{38:[2,41]},{8:[2,37],14:[2,37],17:[2,37],21:[2,37],23:[2,37],29:[2,37],31:[2,37],34:[2,37],35:[2,37],38:[2,37],39:[2,37],40:[2,37],43:[2,37]},{8:[2,38],14:[2,38],17:[2,38],21:[2,38],23:[2,38],29:[2,38],31:[2,38],34:[2,38],35:[2,38],38:[2,38],39:[2,38],40:[2,38],43:[2,38]},{8:[2,16],14:[2,16],17:[2,16],21:[2,16],23:[2,16],30:[2,16],31:[2,16]},{15:27,24:61,29:[2,32],34:[2,32],35:[2,32],36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{8:[2,21],14:[2,21],17:[2,21],21:[2,21],23:[2,21],29:[2,21],31:[2,21],34:[2,21],35:[2,21]},{30:[1,62]},{8:[2,25],14:[2,25],17:[2,25],21:[2,25],23:[2,25],29:[2,25],31:[2,25],34:[2,25],35:[2,25]},{15:29,21:[2,32],32:63,36:23,38:[2,32],39:[2,32],40:[2,32],43:[2,32]},{21:[1,64]},{8:[2,36],14:[2,36],17:[2,36],21:[2,36],23:[2,36],29:[2,36],31:[2,36],34:[2,36],35:[2,36],38:[2,36],39:[2,36],40:[2,36],43:[2,36]},{38:[1,65]},{21:[1,66]},{8:[2,23],14:[2,23],17:[2,23],21:[2,23],23:[2,23],29:[2,23],31:[2,23],34:[2,23],35:[2,23]},{21:[1,67]},{8:[2,12],14:[2,12],17:[2,12],23:[2,12],31:[2,12]},{42:[2,39]},{8:[2,17],14:[2,17],17:[2,17],21:[2,17],23:[2,17],30:[2,17],31:[2,17]},{8:[2,26],14:[2,26],17:[2,26],21:[2,26],23:[2,26],29:[2,26],31:[2,26],34:[2,26],35:[2,26]}],
defaultActions: {8:[2,1],48:[2,40],49:[2,41],65:[2,39]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 5
break;
case 2:return 14
break;
case 3:return 17
break;
case 4:return 23
break;
case 5:return 31
break;
case 6:return 31
break;
case 7:return 31
break;
case 8:return 48
break;
case 9:return 51
break;
case 10:return 50
break;
case 11:return 34
break;
case 12:return 39
break;
case 13:return 38
break;
case 14:return ':'
break;
case 15:return 46
break;
case 16:return 43
break;
case 17:return 40
break;
case 18:return 42
break;
case 19:return 20
break;
case 20:return 21
break;
case 21:return 29
break;
case 22:return 30
break;
case 23:return 45
break;
case 24:return '>'
break;
case 25:return 8
break;
case 26:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|(\/\/[^\u000a\u000d]*))/,/^(?:[Tt][Aa]:)/,/^(?:[Ee][Nn][Dd][Pp][Oo][Ii][Nn][Tt]:)/,/^(?:[Oo][Uu][Tt][Cc][Oo][Mm][Ee]:)/,/^(?:[Aa][Ss][Ss][Ee][Ss][Ss][Mm][Ee][Nn][Tt]:)/,/^(?:[Qq][Uu][Aa][Nn][Tt]:)/,/^(?:[Ss][Ss][Xx]:)/,/^(?:[Dd][Ii][Aa][Gg][Pp][Rr][Oo][Cc]:)/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\U00010000-\U000effff])|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/,/^(?:(([A-Za-z_])([A-Za-z_0-9])*))/,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[tbnrf\\\"\'])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?::)/,/^(?:=)/,/^(?:@)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = TAparser;
exports.Parser = TAparser.Parser;
exports.parse = function () { return TAparser.parse.apply(TAparser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}